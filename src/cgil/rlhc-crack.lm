include 'ril.lm'

namespace crack_out
	token _IN_ /''/
	token _EX_ /''/

	lex
		token comment /
			'//' any* :> '\n' |
			'/*' any* :>> '*/'
		/

		token id
			/[a-zA-Z_][a-zA-Z_0-9]*/

		token number /
			[0-9]+
		/

		token symbol /
			'!' | '#' | '$' | '%' | '&' | '(' | ')' | '*' |
			'+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' |
			'=' | '>' | '?' | '@' | '[' | ']' | '^' | '|' |
			'~' /

		literal `{ `}

		token string /
				'"' ( [^"\\] | '\\' any ) * '"' |
				"'" ( [^'\\] | '\\' any ) * "'" |
				"`" ( [^`\\] | '\\' any ) * "`"
			/

		ignore
			/[ \t\v\r\n]+/
	end

	def item
		[comment]
	|	[id]
	|	[number]
	|	[symbol]
	|	[string]
	|	[`{ _IN_ item* _EX_ `} ]

	def crack_out
		[_IN_ _EX_ item*]
end

namespace crack_gen

	global Parser: parser<crack_out::crack_out>

	void tok_list( TL: host::tok* )
	{
		for Tok: host::tok in repeat(TL) {
			switch Tok
			case [host::`${ StmtList: stmt* host::`}$] {
				send Parser
					"if ( 1 ) {
					"	[stmt_list( StmtList )]
					"}
			}
			case [host::`={ Expr: expr host::`}=] {
				send Parser
					"([expr( Expr )])"
			}
			case [E: escape] {
				Str: str = $E
				send Parser
					"[Str.suffix( 1 )]"
			}
			default {
				send Parser
					[Tok]
			}
		}
	}

	void embedded_host( EmbeddedHost: embedded_host )
	{
		switch EmbeddedHost
		case [`host `( string `, uint `) `={ TL: host::tok* host::`}=]
		{
			send Parser
				"([tok_list( TL )])"
		}
		case [`host `( string `, uint `) `${ TL: host::tok* host::`}$]
		{
			send Parser 
				"if ( 1 ) {
				"	[tok_list( TL )]
				"}
		}
		case [`host `( string `, uint `) `@{ TL: host::tok* host::`}@]
		{
			send Parser
				[tok_list( TL )]
		}
	}

	void expr_factor( ExprFactor: expr_factor )
	{
		switch ExprFactor
		case [EH: embedded_host]
		{
			send Parser
				[embedded_host( EH )]
		}
		case [`( E: expr `)]
		{
			send Parser
				"([expr(E)])"
		}
		case [EF: expr_factor `[ E: expr `]]
		{
			send Parser
				"[expr_factor(EF)]\[[expr( E )]\]"
		}
		case [`offset `( Base: expr `, Offset: expr `)]
		{
			send Parser
				[expr( Offset )]
		}
		case [`deref `( Base: expr `, Offset: expr `)]
		{
			send Parser
				[ expr( Base ) '[' expr( Offset ) ']']
		}
		case [`TRUE]
		{
			send Parser "1"
		}
		case [`FALSE]
		{
			send Parser "1"
		}
		case [N: `nil]
		{
			send Parser "0"
		}
		case [Number: number]
		{
			number( Number )
		}
		case [E1: embedded_host `-> E2: expr_factor]
		{
			# The accessor operator is contained wihtin the lhs.
			embedded_host( E1 )
			expr_factor( E2 )
		}
		case [`cast `( T: type `) F: expr_factor]
		{
			send Parser 
				"[type( T )] ( [expr_factor( F )] )"
		}
		case [I: ident `[ E: expr `] `. F: ident] {
			send Parser
				[^I '_' ^F '[' E ']']
		}
		default {
			# Catches cases not specified
			send Parser [ExprFactor]
		}
	}

	void lvalue( ExprFactor: lvalue )
	{
		switch ExprFactor
		case [EH: embedded_host]
		{
			send Parser
				[embedded_host( EH )]
		}
		case [LV: lvalue O: `[ TL: expr C: `]]
		{
			send Parser
				[lvalue(LV) O expr( TL ) C]
		}
		case [E1: embedded_host `-> E2: lvalue]
		{
			# The accessor operator is contained wihtin the lhs.
			embedded_host( E1 )
			lvalue( E2 )
		}
		case [I: ident `[ E: expr `] `. F: ident] {
			send Parser
				[^I '_' ^F '[' E ']']
		}
		default {
			# Catches cases not specified
			send Parser [ExprFactor]
		}
	}

	void expr_factor_op( ExprFactorOp: expr_factor_op )
	{
		switch ExprFactorOp
		case [B: `! expr_factor_op]
		{
			send Parser [B]
			expr_factor_op( ExprFactorOp._expr_factor_op )
		}
		case [T: `~ expr_factor_op]
		{
			send Parser [T]
			expr_factor_op( ExprFactorOp._expr_factor_op )
		}
		case [expr_factor]
		{
			expr_factor( ExprFactorOp.expr_factor )
		}
	}

	void expr_bitwise( ExprBitwise: expr_bitwise )
	{
		switch ExprBitwise
		case [expr_bitwise A: `& expr_factor_op]
		{
			expr_bitwise( ExprBitwise._expr_bitwise )
			send Parser [A]
			expr_factor_op( ExprBitwise.expr_factor_op )
		}
		case [expr_factor_op]
		{
			expr_factor_op( ExprBitwise.expr_factor_op )
		}
	}

	void expr_mult( ExprMult: expr_mult )
	{
		switch ExprMult
		case [expr_mult T: `* expr_bitwise]
		{
			expr_mult( ExprMult._expr_mult )
			send Parser [T]
			expr_bitwise( ExprMult.expr_bitwise )
		}
		case [expr_bitwise]
		{
			expr_bitwise( ExprMult.expr_bitwise )
		}
	}

	void expr_add( ExprAdd: expr_add )
	{
		switch ExprAdd
		case [expr_add Op: add_op expr_mult]
		{
			expr_add( ExprAdd._expr_add )
			send Parser [Op]
			expr_mult( ExprAdd.expr_mult )
		}
		case [expr_mult]
		{
			expr_mult( ExprAdd.expr_mult )
		}
	}

	void expr_shift( ExprShift: expr_shift )
	{
		switch ExprShift
		case [expr_shift Op: shift_op expr_add]
		{
			expr_shift( ExprShift._expr_shift )
			send Parser [Op]
			expr_add( ExprShift.expr_add )
		}
		case [expr_add]
		{
			expr_add( ExprShift.expr_add )
		}
	}

	void expr_test( ExprTest: expr_test )
	{
		switch ExprTest
		case [expr_test Op: test_op expr_shift]
		{
			expr_test( ExprTest._expr_test )
			send Parser [Op]
			expr_shift( ExprTest.expr_shift )
		}
		case [expr_shift]
		{
			expr_shift( ExprTest.expr_shift )
		}
	}

	void expr( Expr: expr )
	{
		expr_test( Expr.expr_test )
	}

	void type( Type: type )
	{
		switch Type
		case "s8"
			send Parser ['int16 ']
		case "s16"
			send Parser ['int16 ']
		case "s32"
			send Parser ['int32 ']
		case "s64"
			send Parser ['int64 ']
		case "s128"
			send Parser ['long long ']
		case "uint"
			send Parser ['uint32 ']
		default
			send Parser [Type]
	}

	void number( Number: number )
	{
		switch Number
		case [`u `( uint `) ]
			send Parser "[Number.uint]u"
		case [`c `( uint `) ]
			send Parser "[Number.uint]"
		default
			send Parser [Number]
	}

	void num_list( NumList: num_list )
	{
		for Number: number in NumList
			send Parser "[number( Number )], "
	}

	void stmt( Stmt: stmt )
	{
		switch Stmt
		case [EH: embedded_host]
		{
			send Parser
				[embedded_host( EH )]
		}
		case [Array: static_array] {
			send Parser
				"const array\[[type(Array.type)]\] "
					"[Array.ident] = \[ [num_list(Array.num_list)] \];
		}
		case [Value: static_value] {
			send Parser
				"const [Value.type] [Value.ident] = [Value.number];
		}
		case [
				`if `( IfExpr: expr `) IfStmt: stmt
				ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
		] {
			send Parser
				"if ( [expr(IfExpr)] )
				"	[flow_stmt(IfStmt)]

			for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
				match ElseIfClause
					['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

				send Parser
					"else if ( [expr(ElseIfExpr)] )
					"	[flow_stmt(ElseIfStmt)]
			}

			if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
				send Parser
					"else
					"	[flow_stmt(ElseStmt)]
			}
		}
		case [`while `( WhileExpr: expr `) WhileStmt: stmt] {
			send Parser
				"while ( [expr(WhileExpr)] )
				"	[flow_stmt(WhileStmt)]
		}
		case [`switch `( SwitchExpr: expr `) `{ StmtList: stmt* `}] {

			require StmtList
				[`case E1: expr `{ Inner: stmt* `} Rest: stmt*]

			send Parser
				"if ( [expr(SwitchExpr)] == [expr(E1)] ) {
				"	[stmt_list(Inner)]
				"}

			for S: stmt in repeat(Rest) {
				switch S
				case [`case E1: expr `{ Inner: stmt* `}]
				{
					send Parser
						"else if ( [expr(SwitchExpr)] == [expr(E1)] ) {
						"	[stmt_list(Inner)]
						"}
				}
				case
					[`default `{ Inner: stmt* `}]
				{
					send Parser
						"else {
						"	[stmt_list(Inner)]
						"}
				}
			}

			send Parser
				";
		}
		case [ExprExpr: expr Semi: `;] {
			send Parser
				[expr(ExprExpr) Semi]
		}
		case [`{ TL: stmt* `}] {
			send Parser
				"if ( 1 ) {
				"	[stmt_list(TL)]
				"}
		}
		case [
			TypeList: opt_const Type: type
			Ident: ident OptInit: opt_init Semi: `;
		]
		{
			send Parser
				[TypeList type(Type) Ident]

			if match OptInit [E: `= expr] {
				send Parser
					[E expr(OptInit.expr)]
			}

			send Parser
				[Semi]
		}
		case [Export: export_stmt]
		{
			send Parser
				"#define [Export.ident] [number(Export.number)] 
		}
		case ['fallthrough' ';']
		{
			# Nothing needed here.
		}
		case [Index: index_stmt]
		{
			send Parser
				"int [Index.ident]

			if match Index.opt_init [E: `= expr] {
				send Parser
					[E expr(Index.opt_init.expr)]
			}
			else {
				send Parser
					" = 0"
			}

			send Parser ";
		}
		case [case_block]
		{
			send Parser
				"case [expr( Stmt.case_block.expr )]:
				"[stmt_list( Stmt.case_block._repeat_stmt )]
				"break;
		}
		case [default_block]
		{
			send Parser
				"default:
				"[stmt_list( Stmt.default_block._repeat_stmt )]
				"break;
		}
		case [case_label]
		{
			send Parser
				"case [expr( Stmt.case_label.expr )]:
		}
		case [AS: assign_stmt]
		{
			send Parser
				"[lvalue(AS.LValue) AS.assign_op expr(AS.expr)];
		}
		default {
			# catches unspecified cases
			send Parser [Stmt]
		}
	}

	void flow_stmt( Stmt: stmt )
	{
		switch Stmt
		case [`{ TL: stmt* `}] {
			send Parser
				"{
				"	[stmt_list(TL)]
				"}
		}
		default {
			stmt( Stmt )
		}
	}

	void stmt_list( StmtList: stmt* )
	{
		for Stmt: stmt in repeat( StmtList )
			stmt( Stmt )
	}

	void trans( Output: stream, Start: start )
	{
		Parser = new parser<crack_out::crack_out>()

		if ( Start.opt_bom.bom )
			send Output [Start.opt_bom.bom]

		stmt_list( Start._repeat_stmt )

		CO: crack_out::crack_out = Parser->finish()

		if CO {
			send Output
				[CO]
		}
		else {
			send stderr
				"failed to parse output: [Parser->error]
		}
	}
end

void trans( Output: stream, Start: start )
{
	crack_gen::trans( Output, Start )
}

include 'rlhc-main.lm'
